#pragma once

// Commented out stuff is not (yet) supported

// Mirror of D3D11_USAGE in d3d11.h
enum class ResourceUsage
{
	DEFAULT = 0,
	IMMUTABLE = 1,
	DYNAMIC = 2,
	STAGING = 3
};

// Mirror of D3D11_BIND_FLAG in d3d11.h
typedef enum BindFlag
{
	BIND_VERTEX_BUFFER = 0x1L,
	BIND_INDEX_BUFFER = 0x2L,
	BIND_CONSTANT_BUFFER = 0x4L,
	BIND_SHADER_RESOURCE = 0x8L,
	//BIND_STREAM_OUTPUT = 0x10L,
	BIND_RENDER_TARGET = 0x20L,
	BIND_DEPTH_STENCIL = 0x40L,
	BIND_UNORDERED_ACCESS = 0x80L,
	//BIND_DECODER = 0x200L,
	//BIND_VIDEO_ENCODER = 0x400L
} BindFlag;

// Mirror of D3D11_CPU_ACCESS_FLAG in d3d11.h
typedef enum CpuAccessFlag
{
	CPU_ACCESS_WRITE = 0x10000L,
	CPU_ACCESS_READ = 0x20000L
} CpuAccessFlag;

// Mirror of D3D11_RESOURCE_MISC_FLAG in d3d11.h
typedef enum ResourceMiscFlag
{
	RESOURCE_MISC_GENERATE_MIPS = 0x1L,
	//RESOURCE_MISC_SHARED = 0x2L,
	RESOURCE_MISC_TEXTURECUBE = 0x4L,
	//RESOURCE_MISC_DRAWINDIRECT_ARGS = 0x10L,
	//RESOURCE_MISC_BUFFER_ALLOW_RAW_VIEWS = 0x20L,
	RESOURCE_MISC_BUFFER_STRUCTURED = 0x40L,
	//RESOURCE_MISC_RESOURCE_CLAMP = 0x80L,
	//RESOURCE_MISC_SHARED_KEYEDMUTEX = 0x100L,
	//RESOURCE_MISC_GDI_COMPATIBLE = 0x200L,
	//RESOURCE_MISC_SHARED_NTHANDLE = 0x800L,
	//RESOURCE_MISC_RESTRICTED_CONTENT = 0x1000L,
	//RESOURCE_MISC_RESTRICT_SHARED_RESOURCE = 0x2000L,
	//RESOURCE_MISC_RESTRICT_SHARED_RESOURCE_DRIVER = 0x4000L,
	//RESOURCE_MISC_GUARDED = 0x8000L,
	//RESOURCE_MISC_TILE_POOL = 0x20000L,
	//RESOURCE_MISC_TILED = 0x40000L,
	//RESOURCE_MISC_HW_PROTECTED = 0x80000L
} ResourceMiscFlag;

// Mirror of D3D11_TEXTURE_ADDRESS_MODE in d3d11.h
enum class TexAddr
{
	WRAP = 1,
	MIRROR = 2,
	CLAMP = 3,
	BORDER = 4,
	MIRROR_ONCE = 5
};

// Mirror of D3D11_FILTER in d3d11.h
typedef enum FilterMode
{
	FILTER_DEFAULT = -1, // This one is custom!
	FILTER_MIN_MAG_MIP_POINT = 0,
	FILTER_MIN_MAG_POINT_MIP_LINEAR = 0x1,
	FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x4,
	FILTER_MIN_POINT_MAG_MIP_LINEAR = 0x5,
	FILTER_MIN_LINEAR_MAG_MIP_POINT = 0x10,
	FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x11,
	FILTER_MIN_MAG_LINEAR_MIP_POINT = 0x14,
	FILTER_MIN_MAG_MIP_LINEAR = 0x15,
	FILTER_ANISOTROPIC = 0x55,
	FILTER_COMPARISON_MIN_MAG_MIP_POINT = 0x80,
	FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR = 0x81,
	FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x84,
	FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR = 0x85,
	FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT = 0x90,
	FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x91,
	FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT = 0x94,
	FILTER_COMPARISON_MIN_MAG_MIP_LINEAR = 0x95,
	FILTER_COMPARISON_ANISOTROPIC = 0xd5,
	FILTER_MINIMUM_MIN_MAG_MIP_POINT = 0x100,
	FILTER_MINIMUM_MIN_MAG_POINT_MIP_LINEAR = 0x101,
	FILTER_MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x104,
	FILTER_MINIMUM_MIN_POINT_MAG_MIP_LINEAR = 0x105,
	FILTER_MINIMUM_MIN_LINEAR_MAG_MIP_POINT = 0x110,
	FILTER_MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x111,
	FILTER_MINIMUM_MIN_MAG_LINEAR_MIP_POINT = 0x114,
	FILTER_MINIMUM_MIN_MAG_MIP_LINEAR = 0x115,
	FILTER_MINIMUM_ANISOTROPIC = 0x155,
	FILTER_MAXIMUM_MIN_MAG_MIP_POINT = 0x180,
	FILTER_MAXIMUM_MIN_MAG_POINT_MIP_LINEAR = 0x181,
	FILTER_MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x184,
	FILTER_MAXIMUM_MIN_POINT_MAG_MIP_LINEAR = 0x185,
	FILTER_MAXIMUM_MIN_LINEAR_MAG_MIP_POINT = 0x190,
	FILTER_MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x191,
	FILTER_MAXIMUM_MIN_MAG_LINEAR_MIP_POINT = 0x194,
	FILTER_MAXIMUM_MIN_MAG_MIP_LINEAR = 0x195,
	FILTER_MAXIMUM_ANISOTROPIC = 0x1d5
} FilterMode;

// Mirror of D3D11_COMPARISON_FUNC in d3d11.h
enum class ComparisonFunc
{
	NEVER = 1,
	LESS = 2,
	EQUAL = 3,
	LESS_EQUAL = 4,
	GREATER = 5,
	NOT_EQUAL = 6,
	GREATER_EQUAL = 7,
	ALWAYS = 8
};

// Mirror of D3D11_CULL_MODE in d3d11.h
enum class CullMode
{
	NONE = 1,
	FRONT = 2,
	BACK = 3
};

enum class VertexInputSemantic
{
	POSITION = 1,
	NORMAL = 2,
	TANGENT = 3,
	COLOR = 4,
	TEXCOORD = 5
};

typedef enum RenderTargetClearFlags
{
	CLEAR_FLAG_COLOR   = 1 << 0,
	CLEAR_FLAG_DEPTH   = 1 << 1,
	CLEAR_FLAG_STENCIL = 1 << 2,
	CLEAR_FLAG_ALL = CLEAR_FLAG_COLOR | CLEAR_FLAG_DEPTH | CLEAR_FLAG_STENCIL,
} RenderTargetClearFlags;
